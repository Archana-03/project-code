PREFERENCES: It includes different color of backgrounds like- red, yellow ,blue ,green, cyan, black, grey, etc. It helps the application to look more attractive than any other.
SOURCE CODE
MyPref.java
package com.hp;

import com.hp.*;
import android.os.Bundle;
import android.preference.PreferenceActivity;

public class MyPref extends PreferenceActivity{
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		addPreferencesFromResource(R.xml.prefs);
		
	}

}
 MUSIC PLAYER: In this module the user can access its own list of songs from the storage device which will be displayed alphabetically in an order. The playlist has an icon in the main menu itself so that the user may not have to go on the next page and surf for the song.
SOURCE CODE
MusicPlayer.java

package com.hp;

import java.util.concurrent.TimeUnit;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.os.Handler;
import android.preference.PreferenceManager;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.SeekBar;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.SeekBar.OnSeekBarChangeListener;

public class MusicPlayer extends Activity {
	
	Button pl;
	LinearLayout r1;
	
	private SeekBar volumeBar;
	private AudioManager amanager;

	 MediaPlayer mediaPlayer;
	 TextView SongName, duration;
	 double timeElapsed = 0, finalTime = 0;
	 int forwardTime = 2000, backwardTime = 2000;
	 
	 Handler durationHandler = new Handler();
	 SeekBar seekbar;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setContentView(R.layout.musicplayer);
		r1=(LinearLayout)findViewById(R.id.ll);
		
		pl=(Button)findViewById(R.id.button1);
		pl.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Intent i = new Intent(MusicPlayer.this,MySDMain.class);
				startActivity(i);
			}
		});
		  
	    
	    volumeBar = (SeekBar) findViewById(R.id.sb_volumebar);
	    
	    amanager = (AudioManager) this.getSystemService(Context.AUDIO_SERVICE);
	   // volumeBar.setProgressDrawable(null); 
	    //to make the volume bar invisible
	   
	    volumeBar.setMax(amanager.getStreamMaxVolume(AudioManager.STREAM_MUSIC));
	    volumeBar.setKeyProgressIncrement(1);
	    volumeBar.setProgress(amanager.getStreamVolume(AudioManager.STREAM_MUSIC));
		volumeBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener() 
		{
			@Override
			public void onStopTrackingTouch(SeekBar seekBar) 
			{	
			}
			
			@Override
			public void onStartTrackingTouch(SeekBar seekBar) 
			{
			}
			
			@Override
			public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) 
			{
				//change the volume, displaying a toast message containing the current volume
				amanager.setStreamVolume(AudioManager.STREAM_MUSIC, progress, AudioManager.FLAG_SHOW_UI + AudioManager.FLAG_PLAY_SOUND);
			}
		});
	    initializeViews();
	}
	
	public void initializeViews(){
		SongName = (TextView) findViewById(R.id.songName);
		mediaPlayer = MediaPlayer.create(this, R.raw.kabira);
		finalTime = mediaPlayer.getDuration();
		duration = (TextView) findViewById(R.id.songDuration);
		seekbar = (SeekBar) findViewById(R.id.seekBar);
		
		SongName.setText("Kabira");
		
		
		seekbar.setMax((int) finalTime);
		seekbar.setClickable(false);
	}

	// playing song
	public void play(View view) {
		
		mediaPlayer.start();
		timeElapsed = mediaPlayer.getCurrentPosition();
		seekbar.setProgress((int) timeElapsed);
		durationHandler.postDelayed(updateSeekBarTime, 100);
	}

	
	
	private Runnable updateSeekBarTime = new Runnable() {
		public void run() {
			
			//get current position
			timeElapsed = mediaPlayer.getCurrentPosition();
			//set seekbar progress
			seekbar.setProgress((int) timeElapsed);
			//set time remaing
			double timeRemaining = finalTime - timeElapsed;
			duration.setText(String.format("%d min, %d sec", TimeUnit.MILLISECONDS.toMinutes((long) timeRemaining), TimeUnit.MILLISECONDS.toSeconds((long) timeRemaining) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes((long) timeRemaining))));
			durationHandler.postDelayed(this, 100);
		}
	};

	// pause mp3 song
	public void pause(View view) {
		mediaPlayer.pause();
	}

	public void forward(View view) {
		if ((timeElapsed + forwardTime) <= finalTime) {
			
			timeElapsed = timeElapsed + forwardTime;

			mediaPlayer.seekTo((int) timeElapsed);
		}
	}


	public void rewind(View view) {
	
		if ((timeElapsed - backwardTime) > 0) {
			
			timeElapsed = timeElapsed - backwardTime;
			
			//seek to the exact second of the track
			mediaPlayer.seekTo((int) timeElapsed);
			}


	volumeBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener() 
	{
	
		@Override
		public void onStopTrackingTouch(SeekBar seekBar) 
		{	
		}
		
		@Override
		public void onStartTrackingTouch(SeekBar seekBar) 
		{
		}
		
		@Override
		public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) 
		{
			//change the volume, displaying a toast message containing the current volume
			amanager.setStreamVolume(AudioManager.STREAM_MUSIC, progress, AudioManager.FLAG_SHOW_UI + AudioManager.FLAG_PLAY_SOUND);
		}
	});   
	
}





@Override
public boolean onKeyDown(int keyCode, KeyEvent event) 
{
	//if one of the volume keys were pressed
	if(keyCode == KeyEvent.KEYCODE_VOLUME_DOWN || keyCode == KeyEvent.KEYCODE_VOLUME_UP)
	{
		//change the seek bar progress indicator position
		volumeBar.setProgress(amanager.getStreamVolume(AudioManager.STREAM_MUSIC));
		
	}
	
	return super.onKeyDown(keyCode, event); 
}


@Override
public boolean onCreateOptionsMenu(Menu menu) {
	// TODO Auto-generated method stub
	super.onCreateOptionsMenu(menu);
	MenuInflater blowUp=getMenuInflater();
	blowUp.inflate(R.menu.cool_menu, menu);
	return true;
	
}

protected void onResume() {
	// TODO Auto-generated method stub
	super.onResume();
SharedPreferences setting=PreferenceManager.getDefaultSharedPreferences(this);
String color = setting.getString("list", "RED");
if(color.equals("RED"))
{
r1.setBackgroundColor(Color.RED);


}
else 
if(color.equals("GREEN")){
r1.setBackgroundColor(Color.GREEN);

}
else 
if(color.equals("BLUE")){
r1.setBackgroundColor(Color.BLUE);


}
else 
if(color.equals("BLACK")){
r1.setBackgroundColor(Color.BLACK);


}
else 
if(color.equals("WHITE")){
r1.setBackgroundColor(Color.WHITE);


}
else 
if(color.equals("GRAY")){
r1.setBackgroundColor(Color.GRAY);


}
else 
if(color.equals("YELLOW")){
r1.setBackgroundColor(Color.YELLOW);


}
else 
if(color.equals("MAGENTA")){
r1.setBackgroundColor(Color.MAGENTA);


}
else 
if(color.equals("CYAN")){
r1.setBackgroundColor(Color.CYAN);


}

 Toast.makeText(MusicPlayer.this,"Color:"+ color.toString(),Toast.LENGTH_LONG).show();

}


	






@Override
	public boolean onOptionsItemSelected(MenuItem item) {
	switch(item.getItemId()){
	case R.id.about:
		Intent i=new Intent("android.intent.action.AboutUs");
		startActivity(i);
		
		break;
	case R.id.pref:
		Intent p=new Intent("android.intent.action.MYPREF");
		startActivity(p);
		break;
	}
		
		return false;

} 


}

